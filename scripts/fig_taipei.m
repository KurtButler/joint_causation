%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: /Users/kbutler/Documents/MATLAB/Joint Causation/for publication/data/real+estate+valuation+data+set/Real estate valuation data set.xlsx
%    Worksheet: 工作表1
%
% Auto-generated by MATLAB on 17-Nov-2023 11:59:16

if ~exist('Real estate valuation data set.xlsx','file')
    warning('The Taipei Housing Data Set (Real estate valuation data set.xlsx) cannot be found. The fig_taipei script may throw an error.')
end

% Set up the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 8);

% Specify sheet and range
opts.Sheet = "工作表1";
opts.DataRange = "A2:H415";

% Specify column names and types
opts.VariableNames = ["No", "X1TransactionDate", "X2HouseAge", "X3DistanceToTheNearestMRTStation", "X4NumberOfConvenienceStores", "X5Latitude", "X6Longitude", "YHousePriceOfUnitArea"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double"];

% Import the data
Realestatevaluationdataset = readtable("./data/real+estate+valuation+data+set/Real estate valuation data set.xlsx", opts, "UseExcel", false);

% Convert to output type
Realestatevaluationdataset = table2array(Realestatevaluationdataset);

% Clear temporary variables
clear opts


%% Control the rng
rng(0)


%% Set up 
Realestatevaluationdataset = Realestatevaluationdataset(randperm(414)',:);
x = Realestatevaluationdataset(:,2:end-1);
x = normalize(x);
y = Realestatevaluationdataset(:,end);

% Names of features
names = ["Date of Sale", "House Age", "Distance to MRT", "Convenience stores", "Latitude", "Longitude", "House Price"];

% Abbreviated names
names = ["Date of Sale", "House Age", "Dist. to MRT", "Stores", "Latitude", "Longitude", "House Price"];



%% GP model
xtrain = x(1:end-50,:);
ytrain = y(1:end-50,:);
xtest = x(end-51:end,:);
ytest = y(end-51:end,:);
gp = fitrgp(xtrain,ytrain,'KernelFunction','ardsquaredexponential','BasisFunction','constant');

% Training set predictions
ytrainpred= predict(gp,xtrain);
% Test predictions
ytestpred = predict(gp,xtest);


%% Let's check the MDCE
Ntest = numel(ytest);


xpredict = x;
% xpredict = xtest;
Npredict = size(xpredict,1);

Dx = size(x,2);
HessPred = zeros(Npredict,Dx^2);
ddyp = zeros(Npredict,1);
for i1=1:Dx
    for i2=i1:Dx
        % Formulas for the ARD-SE kernel
        alpha = gp.Alpha;
        l = gp.KernelInformation.KernelParameters(1:end-1);
        sf= gp.KernelInformation.KernelParameters(end);
        sg= gp.Sigma;

        dx1 = (xpredict(:,i1)-xtrain(:,i1)')/(-l(i1)^2);
        dx2 = (xpredict(:,i2)-xtrain(:,i2)')/(-l(i2)^2);
        del12 = 1/(-l(i1)*l(i2));

        dkdx = (sf.^2)*exp(-0.5*(pdist2(xpredict./l',xtrain./l')).^2).*dx1;
        ddkdxdx = (sf.^2)*exp(-0.5*(pdist2(xpredict./l',xtrain./l')).^2).*(dx1.*dx2 + del12);

        dyp = dkdx*alpha;
        ddyp(:) = ddkdxdx*alpha;

        HessPred(:,i1 + Dx*(i2-1)) = ddyp(:);
        HessPred(:,i2 + Dx*(i1-1)) = ddyp(:);
    end
end

HessSummary = zeros(Dx);
for i1=1:Dx
    for i2=1:Dx
        HessSummary(i1,i2) = mean(HessPred(:,i1 + Dx*(i2-1)));
    end
end

%% Volterra model
% We'll use a bilinear kernel
htrain = bilinearfeatures(xtrain);
htest  = bilinearfeatures(xtest);

[thetaseries,FitInfo] = lasso(htrain,ytrain);
[~,idbest] = min(FitInfo.MSE);
theta = thetaseries(:,idbest);

theta = htrain\ytrain;

% Training set predictions
ytrainvolt = htrain*theta;
% Test predictions
ytestvolt = htest*theta;




% Hessian matrix
BVolt = zeros(Dx);
for d = 1:Dx
    BVolt(1:d,d) = theta( 1 + Dx + (1:d) + d*(d-1)/2); 
end
BVolt = 0.5*(BVolt + BVolt');
HessVolt = 2*BVolt;



%% Compute the insample error
TrainMSE     = var( ytrain - ytrainpred);
TrainMSEvolt = var( ytrain - ytrainvolt);

TestMSE     = var( ytest - ytestpred);
TestMSEvolt = var( ytest - ytestvolt);

% Text output
fprintf('Prediction Errors\n \tGPR \tVolt\n')
fprintf('Train: \t%0.2f \t%0.2f\n',TrainMSE,TrainMSEvolt)
fprintf('Test:  \t%0.2f \t%0.2f\n', TestMSE,TestMSEvolt)

%% Plot
figure(19)
% imagesc(HessPred)

tiledlayout(1,2,'Padding','tight','TileSpacing','tight')

% Tile 1
nexttile
plot(ytest,ytestpred,'ro',ytest,ytestvolt,'b+',[12;80],[12;80],'k-')
title('','(A) Out-of-sample prediction of housing price','FontSize',15)
% axis equal
grid on; grid minor;
xlabel('True y')
ylabel('Predicted y')
legend(sprintf('GPR (test MSE=%0.2f)',TestMSE),...
    sprintf('Volterra (test MSE=%0.2f)',TestMSEvolt),...
    'Location','best','FontSize',10)

% Tile 2
nexttile
imagesc(HessSummary)
clim(max(abs(clim)).*[-1 1])
uu = (1/256)*linspace(-250,256,500)';
redblue = max([uu,flipud([uu,uu])],0);
colormap(redblue)
colorbar

xticks(1:6)
yticks(1:6)
xticklabels(names)
yticklabels(names)
title('','(B) Average MDCE estimates from GPR','FontSize',15)


%% Save the figure
set(gcf,'Position',[52 102 622 299])
saveas(gcf,'./results/taipei.png')
